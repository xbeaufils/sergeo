/**
 * 
 */
package fr.firesoft.fireTime.factory;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import fr.firesoft.fireTime.besoin.entity.BesoinEquipage;
import fr.firesoft.fireTime.entity.Disponibilite;
import fr.firesoft.fireTime.entity.Periode;
import fr.firesoft.fireTime.entity.horaire.PlageHoraire;
import fr.firesoft.fireTime.entity.horaire.StatutPeriode;
import fr.firesoft.fireTime.ext.horaire.BesoinEquipageHelper;
import fr.firesoft.fireTime.ext.horaire.PlageHoraireHelper;
import fr.firesoft.fireTime.ext.horaire.Presence;
import fr.firesoft.fireTime.ext.horaire.Statut;
import fr.firesoft.fireTime.ext.planning.DispoHelper;
import fr.firesoft.fireTime.ext.planning.JourStatut;

/**
 * @author beaufils
 *
 */
public class HoraireHelperFactory {

	/**
	 * 
	 */
	public HoraireHelperFactory() {
	}

	public static List<Statut> makeList(List<StatutPeriode> lstEntity) {
		List<Statut> lstHelper = new ArrayList<Statut>();
		for (StatutPeriode entity : lstEntity) {
			lstHelper.add(HoraireHelperFactory.make(entity));
		}
		return lstHelper;
	}
	
	public static Statut make(StatutPeriode entity){
		Statut helper = new Statut();
		helper.setIdfStatut(entity.getIdfStatut());
		helper.setLibelle(entity.getLibelle());
		helper.setCode(entity.getCode());
		helper.setDuree(entity.getDuree());
		helper.setPresence(entity.getPresence().name());
		helper.setIdfCycle(entity.getCycle().getIdfCycle());
		helper.setLstIdfPlage(new ArrayList<Integer>());
		for (PlageHoraire plage: entity.getLstComposant()) {
			helper.getLstIdfPlage().add(plage.getIdfPlage());
		}
		return helper;
			
	}
	public static List<PlageHoraireHelper> makeListPlage(List<PlageHoraire> lstPlage) {
		List<PlageHoraireHelper> lstHelper = new ArrayList<PlageHoraireHelper>();
		for (PlageHoraire aPlage : lstPlage) {
			lstHelper.add(HoraireHelperFactory.make(aPlage));
		}
		return lstHelper;
	}
	
	public static PlageHoraireHelper make(PlageHoraire critere) {
		PlageHoraireHelper aHelper = new PlageHoraireHelper();
		aHelper.setIdfPlage(critere.getIdfPlage());
		aHelper.setIdfCycle(critere.getCycle().getIdfCycle());
		aHelper.setLibelle(critere.getLibelle());
		aHelper.setDebut( critere.getDebut().getTime());
		aHelper.setHeureDebut(critere.getDebut().get(Calendar.HOUR_OF_DAY));
		aHelper.setMinuteDebut(critere.getDebut().get(Calendar.MINUTE));
		aHelper.setFin(critere.getFin().getTime() );
		aHelper.setHeureFin(critere.getFin().get(Calendar.HOUR_OF_DAY));
		aHelper.setMinuteFin(critere.getFin().get(Calendar.MINUTE));
		List<BesoinEquipageHelper> lstHelper = new ArrayList<BesoinEquipageHelper>();
		for (BesoinEquipage aBesoin : critere.getLstBesoinEquipage()) {
			BesoinEquipageHelper helper = new BesoinEquipageHelper();
			helper.setIdfBesoin(aBesoin.getIdfBesoin());
			helper.setLibelle(aBesoin.getLibelle());
			helper.setEquipage(BesoinHelperFactory.make(aBesoin.getEquipage()));
			lstHelper.add(helper);
		}
		aHelper.setLstBesoinEquipage(lstHelper);
		return aHelper;
	}
	
	public static DispoHelper makeDispo(Disponibilite entity) {
		DispoHelper helper = new DispoHelper();
		helper.setIdfDispo(entity.getIdfDispo());
		helper.setIdfAgent(entity.getAgent().getIdfAgent());
		helper.setIdfPlage(entity.getPlage().getIdfPlage());
		helper.setIdOrganization(entity.getIdOrganization());
		helper.setJour(entity.getJour());		
		return helper;
	}
	
	public static List<DispoHelper> makeLstDispo(List<Disponibilite> lstEntity) {
		List<DispoHelper> lstDispo =  new ArrayList<DispoHelper>();
		for (Disponibilite entity : lstEntity) {
			lstDispo.add(HoraireHelperFactory.makeDispo(entity));
		}
		return lstDispo;
	}
	
	public static JourStatut makeJourStatut(Disponibilite entity) {
		JourStatut helper = new JourStatut();
		helper.setIdfDispo(entity.getIdfDispo());
		helper.setIdfAgent(entity.getAgent().getIdfAgent());
		helper.setIdfPlage(entity.getPlage().getIdfPlage());
		helper.setIdOrganization(entity.getIdOrganization());
		helper.setJour(entity.getJour());
		helper.setPresence(Presence.DISPO);
		return helper;
	}
	
	public static List<JourStatut> makeLstJourStatut(List<Disponibilite> lstEntity) {
		List<JourStatut> lstDispo =  new ArrayList<JourStatut>();
		for (Disponibilite entity : lstEntity) {
			lstDispo.add(HoraireHelperFactory.makeJourStatut(entity));
		}
		return lstDispo;
	}
	
	public static List<JourStatut> makeJourStatut(Periode entity) {
		List<JourStatut> lstPeriode =  new ArrayList<JourStatut>();
		for (PlageHoraire plage: entity.getStatut().getLstComposant()) {
			JourStatut helper = new JourStatut();
			//helper.setIdfDispo(entity.getIdfDispo());
			helper.setIdfAgent(entity.getAgent().getIdfAgent());
			helper.setIdfPlage(plage.getIdfPlage());
			helper.setIdOrganization(entity.getIdOrganization());
			helper.setJour(entity.getJour());
			helper.setPresence(entity.getStatut().getPresence());
			lstPeriode.add(helper);
		}
		return lstPeriode;
	}
	
	public static List<JourStatut> makeLstJourStatutWithPeriode(List<Periode> lstEntity) {
		List<JourStatut> lstPeriode =  new ArrayList<JourStatut>();
		for (Periode entity : lstEntity) {
			lstPeriode.addAll(HoraireHelperFactory.makeJourStatut(entity));
		}
		return lstPeriode;
	}

}
